" ____    ____  __  .___  ___. .______        ______
" \   \  /   / |  | |   \/   | |   _  \      /      |
"  \   \/   /  |  | |  \  /  | |  |_)  |    |  ,----'
"   \      /   |  | |  |\/|  | |      /     |  |
"    \    /    |  | |  |  |  | |  |\  \----.|  `----.
"     \__/     |__| |__|  |__| | _| `._____| \______|
"
" Mitchell Johnstone 5/20/24
" Sam Keyser 1/6/24

" Package manager
" https://github.com/tpope/vim-pathogen
execute pathogen#infect()
" https://github.com/udalov/kotlin-vim

" NVIM {{{
if has('nvim')
	set runtimepath^=~/.vim runtimepath+=~/.vim/after
	let &packpath=&runtimepath
endif
" }}}
" BASIC VIM CONFIG {{{
syntax enable " Syntax highlighting
filetype plugin indent on
set showmatch " Shows matching brackets
set ruler " Always shows location in file (line#)
set smarttab " Autotabs for certain code
set smartindent
set expandtab
set shiftwidth=4
set tabstop=4
set number " Show Line Numbers
"set nowrap
set autowrite
set noswf
set nocp
set linebreak
set fileformat=unix

" Wild menu
set wildmenu
set wildmode=list:longest " have it behave like bash completion
set wildignore+=*.o,*.obj,*.cod,*.exe,*.zip,*.pdb,*.tlog,*.db,*.gz,*.su,*.elf,*.otf,*.woff,*.bin,*.7z,*.so

" relative line numbers
" set relativenumber

" Mouse
" https://unix.stackexchange.com/a/50735
set mouse=a
if !has('nvim')
   set ttymouse=xterm2
endif

" copy visual area to paste buffer
:set go+=a

" Save
nnoremap <silent> <F2> <ESC>:w<CR>
inoremap <silent> <F2> <ESC>:w<CR>i

" Searching

" make searches case-insensitive, unless they contain upper-case letters:
set ignorecase
set smartcase
set hidden " can switch buffers without a compelled write
set incsearch " show the `best match so far' as search strings are typed:
set hlsearch " Also switch on highlighting the last used search pattern.

" have the h and l cursor keys wrap between lines (like <Space> and <BkSpc> do
" by default), and ~ covert case over line breaks; also have the cursor keys
" wrap in insert mode:
set whichwrap=h,l,~,[,],<,>

"Highlight the cursor line
"set cursorline

" set a sane path to search with gf: current directory down first,
" then current directory up
set path=
set path+=.,**/*,,

" https://stackoverflow.com/a/1625850
set backupdir=~/.vim/tmp//,.
set directory=~/.vim/tmp//,.
set undodir=~/.vim/tmp//,.


" cursor can go anywhere only in visual mode
set virtualedit=block
set showcmd
" }}}
" PRETTY CHARS {{{
set encoding=utf-8 " Necessary to render following characters
set list
set listchars=tab:‚ñ∂¬∑
set listchars+=trail:‚ñΩ
"set listchars+=nbsp:‚ê£
set listchars+=extends:‚ù±
set listchars+=precedes:‚ù∞

"vertical splits less gap between bars
set fillchars+=vert:‚îÇ
" }}}
" STATUS LINE {{{
" always show status line
set laststatus=2
set statusline=%([%q%H%M%R%W]%)
" break the line if too long, then print the relative (to CWD) filename
set statusline+=%<%f\ %y%([%{&ff}][%n]%)
" from https://github.com/scrooloose/vimfiles/blob/master/vimrc
"set statusline+=%{StatuslineTrailingSpaceWarning()}
"display a warning if &paste is set
set statusline+=%#error#
set statusline+=%{&paste?'[paste]':''}
set statusline+=%*

"gutentags line goes here
" Tags: https://learnvim.irian.to/basics/tags
" ctags: https://github.com/universal-ctags/ctags
set statusline+=\ %{gutentags#statusline()}

" left/right divide
set statusline+=%=\ ascii:%3b/0x%02B\ c:%c%V\ l:%l/%L\ %p%%%([%q%H%M%R%W]%)
" }}}
" DIRVISH {{{
" repo: https://github.com/justinmk/vim-dirvish
" more commands: https://github.com/justinmk/vim-dirvish/blob/master/doc/dirvish.txt
map <Leader>nr :Dirvish %<CR>

function! DirvishSetup()
	if has("win32")
		call dirvish#add_icon_fn({p -> p[-1:]=='\'?'üìÇ':'üìÑ'})
	else
		call dirvish#add_icon_fn({p -> p[-1:]=='/'?'üìÇ':'üìÑ'})
	endif
endfunction

augroup filetype_group
	autocmd!
	au FileType dirvish :execute DirvishSetup()
	au FileType dirvish nnoremap <silent><buffer> t :call dirvish#open('tabedit', 0)<CR>
augroup END
" }}}
" GUTENTAGS {{{
let g:gutentags_modules = [ 'ctags' ]
let g:gutentags_define_advanced_commands = 1
"let g:gutentags_project_root = ['source', 'test', 'src' ]
let g:gutentags_project_root = ['gutentags_top', 'trunk', 'tags', 'branches', '.svn', 'src', '.git' ]
let g:gutentags_cache_dir = expand('~/.vim/tmp')
"let g:gutentags_ctags_extra_args = ['--output-format=e-ctags']
"let g:gutentags_trace = 1

" https://www.reddit.com/r/vim/comments/d77t6j/guide_how_to_setup_ctags_with_gutentags_properly/
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0

let g:gutentags_ctags_extra_args = [
         \ '--tag-relative=yes',
         \ '--fields=+ailmnS',
         \ ]

let g:gutentags_ctags_exclude = [
      \ '*.git', '*.svg', '*.hg',
      \ '*/tests/*',
      \ 'build',
      \ 'dist',
      \ '*sites/*/files/*',
      \ 'bin',
      \ 'node_modules',
      \ 'bower_components',
      \ 'cache',
      \ 'compiled',
      \ 'docs',
      \ 'example',
      \ 'bundle',
      \ 'vendor',
      \ '*.md',
      \ '*-lock.json',
      \ '*.lock',
      \ '*bundle*.js',
      \ '*build*.js',
      \ '.*rc*',
      \ '*.json',
      \ '*.min.*',
      \ '*.map',
      \ '*.bak',
      \ '*.zip',
      \ '*.pyc',
      \ '*.class',
      \ '*.sln',
      \ '*.Master',
      \ '*.csproj',
      \ '*.tmp',
      \ '*.csproj.user',
      \ '*.cache',
      \ '*.pdb',
      \ 'tags*',
      \ 'cscope.*',
      \ '*.css',
      \ '*.less',
      \ '*.scss',
      \ '*.exe', '*.dll',
      \ '*.mp3', '*.ogg', '*.flac',
      \ '*.swp', '*.swo',
      \ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
      \ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
      \ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
      \ ]
" }}}
" C++ configuration {{{

" Automatically remove all trailing whitespace when saving files
"autocmd BufWritePre *.pl :%s/\s\+$//e
autocmd FileType c,cpp,h autocmd BufWritePre * call RemoveTrailingWhitespace()

" Copy to clipboard
" nnoremap Y :!cat "%" <Bar> xsel -ib

" inoremap { {}<Left>
" inoremap {<CR> {<CR>}<Esc>O
" inoremap {{ {
" inoremap {} {}

autocmd filetype cpp nnoremap <F9> :w <Bar> !clear & g++ -std=c++17 "%" -o "%:r" <CR>
autocmd filetype cpp nnoremap <F10> :!clear & "./%:r" <CR>

" This will enable code folding.
" Use the marker method of folding.
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd FileType vim setlocal foldmarker={{{,}}}
    autocmd FileType python setlocal foldmethod=indent
    autocmd FileType python setlocal foldnestmax=1
augroup END
" }}}
" Term color wrangling {{{
if has("gui_running")
else
   set termguicolors
   set background=dark
endif
colorscheme gruvbox
" To make it transparent
hi Normal guibg=NONE ctermbg=NONE
" Needed for working with dracula theme tmux
" https://sunaku.github.io/vim-256color-bce.html
if &term =~ '256color'
    set t_ut=
endif
" }}}
" Templates! {{{
if has("autocmd")
	augroup templates
		autocmd BufNewFile *cpp 0r ~/.vim/skeleton/cpp.cpp | 15
	augroup END
endif
" }}}
